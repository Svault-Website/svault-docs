import detect from 'detect-port';
import { pathExists } from 'fs-extra';
import inquirer from 'inquirer';
import Ora, { Ora as OraType } from 'ora';
import pathUtil from 'path';
import { createInterface } from 'readline';
import shell from 'shelljs';
import { ArgumentsCamelCase } from 'yargs';

import { CMD_EXEC_PATH } from './constants.js';

const confirm = async (question: string) =>
  new Promise((resolve) => {
    const cmdInterface = createInterface({
      input: process.stdin,
      output: process.stdout,
    });
    cmdInterface.question(question, (response) => {
      cmdInterface.close();
      resolve(response.toLowerCase() === 'y');
    });
  });

export const checkPortRecursive: <T>(
  argv: ArgumentsCamelCase<T>
) => Promise<number | undefined> = async (argv) => {
  const port = (argv.port || 3000) as Parameters<typeof detect>[0];
  const _port = await detect(port);

  if (port == _port) {
    return port;
  }

  const confirmed = await confirm(
    `Port ${port} is already in use. Use port ${_port} instead? [Y/n]\n`
  );

  if (confirmed) {
    return await checkPortRecursive({
      ...argv,
      port: _port,
    });
  }
  return undefined;
};

export const promptForYarn = async () => {
  const yarnInstalled = shell.which('yarn');
  if (!yarnInstalled) {
    await inquirer
      .prompt([
        {
          type: 'confirm',
          name: 'confirm',
          message: 'yarn must be globally installed. Install yarn?',
          default: true,
        },
      ])
      .then(({ confirm }) => {
        if (confirm) {
          shell.exec('npm install --global yarn');
        } else {
          console.log('Installation cancelled.');
        }
      });
  }
};

export const checkNodeVersion = async () => {
  let nodeVersionString = process.version;
  if (nodeVersionString.charAt(0) === 'v') {
    nodeVersionString = nodeVersionString.slice(1);
  }
  const versionArr = nodeVersionString.split('.');
  const majorVersion = parseInt(versionArr[0], 10);
  if (majorVersion <= 17 || majorVersion >= 20) {
    const logger = buildLogger('Checking for prerequisites...');
    logger.fail('You must be running on a node version of v19.x.x');
    process.exit(1);
  }
};

export const buildLogger = (startText = ''): OraType => {
  const logger = Ora().start(startText);
  return logger;
};

// TODO: Put in prebuild package
const getConfigPath = async (contentDirectoryPath: string): Promise<string | null> => {
  if (await pathExists(pathUtil.join(contentDirectoryPath, 'mint.json'))) {
    return pathUtil.join(contentDirectoryPath, 'mint.json');
  }
  return null;
};

export const checkForMintJson = async () => {
  const configPath = await getConfigPath(CMD_EXEC_PATH);
  if (configPath == null) {
    console.error('Must be ran in a directory where a mint.json file exists.');
    process.exit(1);
  }
  return;
};
